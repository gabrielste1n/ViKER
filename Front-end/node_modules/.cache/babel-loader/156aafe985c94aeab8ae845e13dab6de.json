{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielstein/Documents/ViKER/Front-end/src/containers/Input/Input.js\";\nimport React from 'react';\nimport classes from './Input.module.css';\nimport * as SRD from \"storm-react-diagrams\";\nimport Header from '../Header/Header';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nconst input = () => {\n  // 1) setup the diagram engine\n  const engine = new SRD.DiagramEngine();\n  engine.installDefaultFactories(); // 2) setup the diagram model\n\n  const model = new SRD.DiagramModel();\n  model.setGridSize(1140); // 3) create a default node\n\n  const node1 = new SRD.DefaultNodeModel(\"Professor\", \"rgb(242, 38, 19)\");\n  let port1 = node1.addOutPort(\"First Name\");\n  node1.setPosition(100, 100); // 4) create another default node\n\n  const node2 = new SRD.DefaultNodeModel(\"Department\", \"rgb(255, 203, 5)\");\n  let port2 = node2.addInPort(\"DepartmentID\");\n  node2.setPosition(400, 100); // 5) link the ports\n\n  let link1 = port1.link(port2); // 6) add the models to the root graph\n\n  model.addAll(node1, node2, link1); // 7) load model into engine\n\n  engine.setDiagramModel(model);\n  return React.createElement(\"div\", {\n    className: classes.Diagram,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Header, {\n    header: \"Input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(SRD.DiagramWidget, {\n    style: {\n      height: 500\n    },\n    diagramEngine: engine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default input;","map":{"version":3,"sources":["/Users/gabrielstein/Documents/ViKER/Front-end/src/containers/Input/Input.js"],"names":["React","classes","SRD","Header","require","input","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setGridSize","node1","DefaultNodeModel","port1","addOutPort","setPosition","node2","port2","addInPort","link1","link","addAll","setDiagramModel","Diagram","height"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AACAC,OAAO,CAAC,yCAAD,CAAP;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAEpB;AACA,QAAMC,MAAM,GAAG,IAAIJ,GAAG,CAACK,aAAR,EAAf;AACAD,EAAAA,MAAM,CAACE,uBAAP,GAJoB,CAMpB;;AACA,QAAMC,KAAK,GAAG,IAAIP,GAAG,CAACQ,YAAR,EAAd;AACAD,EAAAA,KAAK,CAACE,WAAN,CAAkB,IAAlB,EARoB,CAUpB;;AACA,QAAMC,KAAK,GAAG,IAAIV,GAAG,CAACW,gBAAR,CAAyB,WAAzB,EAAsC,kBAAtC,CAAd;AACA,MAAIC,KAAK,GAAGF,KAAK,CAACG,UAAN,CAAiB,YAAjB,CAAZ;AACAH,EAAAA,KAAK,CAACI,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAboB,CAepB;;AACA,QAAMC,KAAK,GAAG,IAAIf,GAAG,CAACW,gBAAR,CAAyB,YAAzB,EAAuC,kBAAvC,CAAd;AACA,MAAIK,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,cAAhB,CAAZ;AACAF,EAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAlBoB,CAoBpB;;AACA,MAAII,KAAK,GAAGN,KAAK,CAACO,IAAN,CAAWH,KAAX,CAAZ,CArBoB,CAuBpB;;AACAT,EAAAA,KAAK,CAACa,MAAN,CAAaV,KAAb,EAAoBK,KAApB,EAA2BG,KAA3B,EAxBoB,CA0BpB;;AACAd,EAAAA,MAAM,CAACiB,eAAP,CAAuBd,KAAvB;AAGE,SACE;AAAK,IAAA,SAAS,EAAER,OAAO,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,GAAD,CAAK,aAAL;AAAmB,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC;AAAR,KAA1B;AAAwC,IAAA,aAAa,EAAEnB,MAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CApCD;;AAsCA,eAAeD,KAAf","sourcesContent":["import React from 'react';\nimport classes from './Input.module.css';\nimport * as SRD from \"storm-react-diagrams\";\nimport Header from '../Header/Header';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\n\nconst input = () => {\n\n// 1) setup the diagram engine\nconst engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nconst model = new SRD.DiagramModel();\nmodel.setGridSize(1140);\n\n// 3) create a default node\nconst node1 = new SRD.DefaultNodeModel(\"Professor\", \"rgb(242, 38, 19)\");\nlet port1 = node1.addOutPort(\"First Name\");\nnode1.setPosition(100, 100);\n\n// 4) create another default node\nconst node2 = new SRD.DefaultNodeModel(\"Department\", \"rgb(255, 203, 5)\");\nlet port2 = node2.addInPort(\"DepartmentID\");\nnode2.setPosition(400, 100);\n\n// 5) link the ports\nlet link1 = port1.link(port2);\n\n// 6) add the models to the root graph\nmodel.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\n\n\n  return (\n    <div className={classes.Diagram}>\n      <Header header=\"Input\"/>\n      <SRD.DiagramWidget style={{height:500}} diagramEngine={engine} />\n    </div>\n  );\n}\n\nexport default input;\n"]},"metadata":{},"sourceType":"module"}