{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielstein/Documents/ViKER/Front-end/src/containers/Output/Output.js\";\nimport React from 'react';\nimport classes from './Output.module.css';\nimport * as SRD from \"storm-react-diagrams\";\nimport Header from '../Header/Header';\n\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\nconst output = () => {\n  // 1) setup the diagram engine\n  const engine = new SRD.DiagramEngine();\n  engine.installDefaultFactories(); // 2) setup the diagram model\n\n  const model = new SRD.DiagramModel();\n  model.setGridSize(1140); // 3) create a default node\n\n  const node1 = new SRD.DefaultNodeModel(\"Professor\", \"rgb(0,192,255)\");\n  let port1 = node1.addOutPort(\"Out\");\n  node1.setPosition(100, 100); // 4) create another default node\n\n  const node2 = new SRD.DefaultNodeModel(\"Department\", \"rgb(192,255,0)\");\n  let port2 = node2.addInPort(\"In\");\n  node2.setPosition(400, 100); // 5) link the ports\n\n  let link1 = port1.link(port2); // 6) add the models to the root graph\n\n  model.addAll(node1, node2, link1); // 7) load model into engine\n\n  engine.setDiagramModel(model);\n  return React.createElement(\"div\", {\n    className: classes.Diagram,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Header, {\n    header: \"Output\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(SRD.DiagramWidget, {\n    diagramEngine: engine,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default output;","map":{"version":3,"sources":["/Users/gabrielstein/Documents/ViKER/Front-end/src/containers/Output/Output.js"],"names":["React","classes","SRD","Header","require","output","engine","DiagramEngine","installDefaultFactories","model","DiagramModel","setGridSize","node1","DefaultNodeModel","port1","addOutPort","setPosition","node2","port2","addInPort","link1","link","addAll","setDiagramModel","Diagram"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;AACAC,OAAO,CAAC,yCAAD,CAAP;;AAGA,MAAMC,MAAM,GAAG,MAAM;AAErB;AACA,QAAMC,MAAM,GAAG,IAAIJ,GAAG,CAACK,aAAR,EAAf;AACAD,EAAAA,MAAM,CAACE,uBAAP,GAJqB,CAMrB;;AACA,QAAMC,KAAK,GAAG,IAAIP,GAAG,CAACQ,YAAR,EAAd;AACAD,EAAAA,KAAK,CAACE,WAAN,CAAkB,IAAlB,EARqB,CAUrB;;AACA,QAAMC,KAAK,GAAG,IAAIV,GAAG,CAACW,gBAAR,CAAyB,WAAzB,EAAsC,gBAAtC,CAAd;AACA,MAAIC,KAAK,GAAGF,KAAK,CAACG,UAAN,CAAiB,KAAjB,CAAZ;AACAH,EAAAA,KAAK,CAACI,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAbqB,CAerB;;AACA,QAAMC,KAAK,GAAG,IAAIf,GAAG,CAACW,gBAAR,CAAyB,YAAzB,EAAuC,gBAAvC,CAAd;AACA,MAAIK,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,CAAZ;AACAF,EAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAlBqB,CAoBrB;;AACA,MAAII,KAAK,GAAGN,KAAK,CAACO,IAAN,CAAWH,KAAX,CAAZ,CArBqB,CAuBrB;;AACAT,EAAAA,KAAK,CAACa,MAAN,CAAaV,KAAb,EAAoBK,KAApB,EAA2BG,KAA3B,EAxBqB,CA0BrB;;AACAd,EAAAA,MAAM,CAACiB,eAAP,CAAuBd,KAAvB;AAGE,SACE;AAAK,IAAA,SAAS,EAAER,OAAO,CAACuB,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,GAAD,CAAK,aAAL;AAAmB,IAAA,aAAa,EAAElB,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CApCD;;AAsCA,eAAeD,MAAf","sourcesContent":["import React from 'react';\nimport classes from './Output.module.css';\nimport * as SRD from \"storm-react-diagrams\";\nimport Header from '../Header/Header';\nrequire(\"storm-react-diagrams/dist/style.min.css\");\n\n\nconst output = () => {\n\n// 1) setup the diagram engine\nconst engine = new SRD.DiagramEngine();\nengine.installDefaultFactories();\n\n// 2) setup the diagram model\nconst model = new SRD.DiagramModel();\nmodel.setGridSize(1140);\n\n// 3) create a default node\nconst node1 = new SRD.DefaultNodeModel(\"Professor\", \"rgb(0,192,255)\");\nlet port1 = node1.addOutPort(\"Out\");\nnode1.setPosition(100, 100);\n\n// 4) create another default node\nconst node2 = new SRD.DefaultNodeModel(\"Department\", \"rgb(192,255,0)\");\nlet port2 = node2.addInPort(\"In\");\nnode2.setPosition(400, 100);\n\n// 5) link the ports\nlet link1 = port1.link(port2);\n\n// 6) add the models to the root graph\nmodel.addAll(node1, node2, link1);\n\n// 7) load model into engine\nengine.setDiagramModel(model);\n\n\n  return (\n    <div className={classes.Diagram}>\n      <Header header=\"Output\"/>\n      <SRD.DiagramWidget diagramEngine={engine} />\n    </div>\n  );\n}\n\nexport default output;\n"]},"metadata":{},"sourceType":"module"}